
@using DataAccessLibrary
@using DataAccessLibrary.Models

@inject RecipeState State
@inject IRecipeData Data

<div class="m-4">
    <EditForm Model="@Recipe" OnValidSubmit="OnConfirm" OnInvalidSubmit="@(() => { })">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="d-flex flex-column">
            <div class="d-flex flex-column mt-2">
                <label>Name</label>
                <InputText id="name" @bind-Value="Recipe.Name" placeholder="Name of your recipe"/>
            </div >
            <div class="d-flex flex-column mt-2">
                <label>Ingredient</label>
                <InputTextArea id="ingredient" @bind-Value="Recipe.Ingredient" placeholder="Ingredients of your recipe"></InputTextArea>
            </div>
            <div class="d-flex flex-column mt-2">
                <label>Calorie</label>
                <input type="number" id="calorie" @bind="Recipe.Calorie" placeholder="How much calorie does it have?"/>
            </div>

            <div class="d-flex flex-column mt-2">
                <label>Image</label>
                <InputText id="image" @bind-Value="Recipe.Image" placeholder="Add an image link"/>
            </div>
            
            <!-- Edit  saved tags -->
            <div class="d-flex flex-column mt-2">
                @if (EditTagList != null && EditTagList.Any())
                {
                    <div id="wrapper" class="d-flex">
                        @foreach (var tag in EditTagList)
                        {
                            <div id="tag" class="d-flex my-2">
                                <span class="badge bg-secondary text-center">@tag.Tag</span>
                                <div class="btn-close btn-sm mx-2 align-self-center" @onclick="@(()=>DeleteEditedTags(tag.TagId, Recipe.Id))"></div>
                            </div>
                        }
                    </div>
                }
            </div>
            
            <!-- Create new tags -->
            <div class="d-flex flex-column mt-2">
                @if (Tags != null && Tags.Any())
                {
                    <div id="wrapper" class="d-flex">
                        @foreach (var tag in Tags)
                        {
                            <div id="tag" class="d-flex my-2">
                                <span class="badge bg-secondary text-center">@tag</span>
                                <div class="btn-close btn-sm mx-2 align-self-center" @onclick="@(()=> DeleteTag(tag))"></div>
                            </div>
                        }
                    </div>
                }
                <label>Tags</label>
                @if (tagValidation)
                {
                    <span class="text-danger">
                        You cannot add duplicate tags
                    </span>
                }
                <div class="d-flex flex-row">
                    <input id="@($"{Id}_tag")"

                           placeholder="Add your tags here"
                           autocomplete="off"
                           @bind-value="TagValue"
                           @onkeyup="ClearValidation"/>
                    <button type="button" class="oi oi-plus p-2 btn btn-primary" onclick="@AddTags"></Button>
                </div>
            </div>
        </div>

        <div class="float-end mt-4">
            <button type="button" class="btn btn-secondary mr-auto" @onclick="OnCancel">Cancel</button>
            <button type="submit"class="btn btn-primary">Submit</button>
        </div>

    </EditForm>
</div>

@code {

    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }
    [Parameter] public CreateRecipe Recipe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Recipe != null)
        {
            Console.WriteLine(Recipe.Name);
            foreach (var tag in Recipe.TagList)
            {
                EditTagList.Add(new Tags
                {
                    TagId = tag.TagId,
                    Tag = tag.Tag,
                    NewTag = false
                    
                });
            }
        }
    }

    private List<string> Tags { get; set; } = new List<string>();
    private List<Tags> EditTagList { get; set; } = new List<Tags>();
    private string TagValue { get; set; }
    bool tagValidation = false;

    private Guid Id => Guid.NewGuid();

    private void DeleteEditedTags(Guid Id, Guid recipeId)
    {
        Data.DeleteTag(Id);
        EditTagList.Remove(EditTagList.FirstOrDefault(t => t.TagId == Id)!);
        var modifiedTarget = State.RecipeList.First(x => x.Id == recipeId);
        State.RecipeList.Remove(modifiedTarget);
        var tagList = modifiedTarget.TagList;        
        modifiedTarget.TagList.Remove(tagList.First(x => x.TagId == Id));
        State.RecipeList.Add(modifiedTarget);
       
    }

    private void AddTags()
    {
        if (string.IsNullOrEmpty(TagValue)) return;
        if (Tags.Any(x => x.ToLower() == TagValue.ToLower().TrimEnd()))
        {
            tagValidation = true;
            return;
        }
        foreach (var x in EditTagList)
        {
            if (x.Tag.ToLower() == TagValue.ToLower().TrimEnd())
            {
                tagValidation = true;
                return;
            }
        }
        Tags.Add(TagValue);

        State.NewRecipe.TagList.Add(new Tags
        {
            TagId = Id,
            Tag = TagValue.TrimEnd(),
            NewTag = true
        });



        tagValidation = false;
        TagValue = string.Empty;
    }

    private async Task DeleteTag(string value)
    {
        tagValidation = false;
        if (string.IsNullOrEmpty(value)) return;
        var tag = Tags.FirstOrDefault(t => t == value);
        if (tag == null) return;

        State.RemoveTag(value);
        Tags.Remove(tag);
        
        await InvokeAsync(StateHasChanged);
       
    }

    private void ClearValidation()
    {
        tagValidation = false;
    }

}